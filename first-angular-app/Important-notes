Signals: we will create Signal value by importing  the Signal function from Angular core.
Then: create signal value and store it in a property of your component class component.

The idea behind this Signal thing here is that it's in the end a container you could say that contains a value like this """initial dummy user""". And when you then change that value, Angular will be notified about that change. And Angular then is able to identify all the places, for example, in your templates where that value is being used. So where that Signal is being used in the end, and it's then able to update these places.

You are dealing with containers that contain values and that notify Angular whenever those values change, so that angular can then Update the parts of the UI, where those values are used. That can be a very efficient updating mechanism.

Being able to accept inputs is imp feature and concept in Angular components,because it allows you to reuse components with different data. But Custom components also often need to emit custom events and not just accept inputs. So they need to prosuce outputs as well.

<!-- ? Why does the function output exists, if the Output Decorator is same as the output function? -->

Mostly, so that if you were using the input function for registering the inputs instead of that input Decorator, that if you were doing that than you could use the output function. So, you don't need any decorators at all, neither for inputs nor for outputs inside of that component, besides the component decorator, you still need that. But no Decorator would be needed inside of that component then.
In addition output function is shorter than the Output Decorator as it includes EvenEmitter inside it.

<!-- TODO: GAIN DEPTH KNOWLEDGE ON -->
Input Decorators and input Signals
Output Properties.
How one can Emit his/her own Events with the help of output and how one can then handle them and also get access to the emmitted data, EventEmitter, Output decorator

59: Dependency Injection, reusable instances, Injectable({providedIn})